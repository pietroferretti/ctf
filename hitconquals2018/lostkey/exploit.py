#!/usr/bin/env python

import gmpy
from pwn import *

def calcAx(x):
    global nreq
    global r

    assert nreq
    nreq -= 1

    r.sendline('A')
    r.recvuntil('input: ')

    h = hex(x)[2:].strip('L')
    r.sendline('0'*(len(h)%2) + h)

    res = r.recvline(keepends=False)
    assert 'no' not in res
    r.recvuntil('cmd: ')

    return int(res, 16)

def calcBx(x):
    global nreq
    global r

    assert nreq
    nreq -= 1

    r.sendline('B')
    r.recvuntil('input: ')

    h = hex(x)[2:].strip('L')
    r.sendline('0'*(len(h)%2) + h)

    res = r.recvline(keepends=False)
    assert 'no' not in res
    r.recvuntil('cmd: ')

    return int(res, 16)

def start():
    global r

    with context.local(log_level='warning'):
        if 'remote' in sys.argv[1:]:
            r = remote('18.179.251.168', 21700)
        else:
            r = process('./rsa-b667a9ca0d5c6735e5609565d1fd6ab9.py')

    r.recvuntil('flag!\n')
    hexflag = r.recvline(keepends=False)
    r.recvuntil('cmd: ')

    return int(hexflag, 16)

def findN():
    m1 = 0xdead
    m2 = 0x1337
    m12 = m1**2
    m22 = m2**2

    c1, c2, c12, c22 = map(calcAx, (m1, m2, m12, m22))

    return int(gmpy.gcd(c2*c2-c22, c1*c1-c12))

def get_reductions(lsbs, x):
    return lsbs.index(x)

r = None
nreq = 150

encflag = start()

## find N
n = findN()
log.info('n: %x', n)


## find ratio message/N

# compute all possible values of the last byte
rem = -n % 256    # remainder of -N mod 256
lsbs = []         # `lsbs` contains the values of the least significant byte
                  # after i modular reductions have been performed
for i in range(256):
    lsbs.append(rem * i % 256)

# find E(256)
e256 = calcAx(256)

lowermult = 0
lowerbound = 0
for b in range(1, 128):
    print 'Byte n:', b
    # compute E(256 * m)
    mshifted = (e256 ** b) * encflag

    # decrypt E(256 * m), get last byte oracle
    res = calcBx(mshifted)
    reductions = get_reductions(lsbs, res)

    # get new lower bound
    lowermult = (lowermult << 8) + reductions
    lowerbound = n * lowermult / 256**b   # approximation of flag
    print hex(lowerbound)
    h = hex(lowerbound)[2:].strip('L')
    print ('0'*(len(h)%2) + h).decode('hex')
